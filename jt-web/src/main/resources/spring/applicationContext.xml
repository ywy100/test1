<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!-- 1.配置包扫描 -->
	<context:component-scan base-package="com.jt"/>
	<!-- 2.管理数据源 -->
	<!-- 引入外部的配置文件 -->
	<context:property-placeholder location="classpath:/properties/*.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 3.配置事物的策略 
		1.配置事物管理器
		2.配置事物策略,增删改查
		3.配置AOP切面
	-->
	<!-- 3.1配置事物管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!--3.2.配置事物策略,增删改查  -->
	<tx:annotation-driven/>  <!-- 开启事物的注解 -->
	
	<!-- 通知: 在AOP中真正完成的方法
	事务传播属性  
			serviceA select ~~~~~ serviceB save
			propagation: 
				REQUIRED  默认值  表示必须添加事务
				REQUIRES_NEW 每次都会创建新事务
				NEVER	   从不添加事务
				SUPPORTS  事务支持的 一般在查询操作中使用.如果先执行查询
				后执行增/删/改时后续操作会有事务的支持.
			
			read-only="true" 如果配置了只读 则不允许修改数据库
			spring回滚策略: 如果异常是运行时异常,则默认回滚事务.
						      如果遇到检查异常 默认spring不负责事务回滚.
			rollback-for=""  指定异常类型回滚
			no-rollback-for  指定异常类型不回滚
	 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	
	<!-- 配置AOP 通知+切入点表达式
	spring代理的原则:
		如果被代理者有接口 默认使用JDK代理  要求:必须实现接口
		如果被代理者没有接口 则默认使用CGLIB代理
		特点:cglib创建的代理对象是被代理者的子类
		proxy-target-class="true" 表示强制使用cgLib代理
		
		within(包名.类名)  粗粒度配置 只要是类中方法,都要执行通知
		execution(返回值类型 包名.类名.方法名(参数列表))
		AOP: 
			 切入点
			 通知类型: 前置 后置  异常 最终   环绕 (强大)
			 重点记忆:
			 	环绕通知:可以直接控制目标方法是否执行
			 	其他通知用法:记录程序的执行状态.
			目标方法
	 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.jt.web.service..*.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	
	
</beans>